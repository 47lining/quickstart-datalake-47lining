{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Data Lake Foundation is a QuickStart that provides a Data Lake architecture, Redshift cluster, Elasticsearch domain, Data Lake walk-through web application running on AWS EC2 instance, in the same VPC through Cloudformation templates that provision and configure the required resources, including related QuickStarts. This template provisions all of the resources that are specific to the Quick Start.  Leveraged Quick Starts (VPC, LinuxBastion), if needed, can be provisioned by using the data-lake-foundation-master template. **WARNING** You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VPCID",
                        "VPCCIDR",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "NAT1ElasticIP",
                        "NAT2ElasticIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Demonstration Configuration"
                    },
                    "Parameters": [
                        "CreateDemonstration",
                        "WizardInstanceType",
                        "WebApplicationUsername",
                        "WebApplicationPassword",
                        "DatasetS3BucketName",
                        "DatasetS3KeyPrefix"
                    ]
                },
                {
                    "Label": {
                        "default": "Elasticsearch Configuration"
                    },
                    "Parameters": [
                        "RemoteAccessCIDR",
                        "ElasticsearchNodeType",
                        "ElasticsearchNodeCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift Configuration"
                    },
                    "Parameters": [
                        "EnableRedshift",
                        "RedshiftUsername",
                        "RedshiftPassword",
                        "RedshiftNumberOfNodes",
                        "RedshiftNodeType",
                        "RedshiftDatabaseName",
                        "RedshiftDatabasePort"
                    ]
                },
                {
                    "Label": {
                        "default": "Kinesis configuration"
                    },
                    "Parameters": [
                        "KinesisDataStreamName",
                        "KinesisDataStreamS3Prefix"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "KeyPairName"
                    ]
                }
            ],
            "ParameterLabels": {
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "RemoteAccessCIDR": {
                    "default": "Remote Access CIDR"
                },
                "ElasticsearchNodeType": {
                    "default": "Elasticsearch Instance Type"
                },
                "ElasticsearchNodeCount": {
                    "default": "Elasticsearch Node Count"
                },
                "CreateDemonstration": {
                    "default": "Create demonstration"
                },
                "WizardInstanceType": {
                    "default": "Wizard Instance Type"
                },
                "WebApplicationUsername": {
                    "default": "Web Application User Name"
                },
                "WebApplicationPassword": {
                    "default": "Web Application Password"
                },
                "EnableRedshift": {
                    "default": "Enable Redshift"
                },
                "RedshiftUsername": {
                    "default": "Redshift User Name"
                },
                "RedshiftPassword": {
                    "default": "Redshift Password"
                },
                "RedshiftNumberOfNodes": {
                    "default": "Redshift Number Of Nodes"
                },
                "RedshiftNodeType": {
                    "default": "Redshift Node Type"
                },
                "RedshiftDatabaseName": {
                    "default": "Redshift Database Name"
                },
                "RedshiftDatabasePort": {
                    "default": "Redshift Database Port"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "DatasetS3BucketName": {
                    "default": "Dataset S3 Bucket Name"
                },
                "DatasetS3KeyPrefix": {
                    "default": "Dataset S3 Key Prefix"
                },
                "PrivateSubnet1ID": {
                    "default": "Existing VPC Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Existing VPC Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Existing VPC Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Existing VPC Public Subnet 2 ID"
                },
                "NAT1ElasticIP": {
                    "default": "NAT 1 IP address"
                },
                "NAT2ElasticIP": {
                    "default": "NAT 2 IP address"
                },
                "VPCID": {
                    "default": "Existing VPC ID"
                },
                "VPCCIDR": {
                    "default": "Existing VPC CIDR"
                },
                "KinesisDataStreamName": {
                    "default": "Kinesis Data Stream Name"
                },
                "KinesisDataStreamS3Prefix": {
                    "default": "Kinesis Data Stream S3 Prefix"
                }
            }
        }
    },
    "Mappings": {
        "ConstantsMap": {
            "Constants": {
                "SnsLearnMoreTopicArn": "arn:aws:sns:us-west-2:099058053815:test-datalake-foundation-learn-more-topic"
            }
        }
    },
    "Conditions": {
        "CreateDemoResources": {
            "Fn::Equals": [
                {
                    "Ref": "CreateDemonstration"
                },
                "yes"
            ]
        },
        "RedshiftPubliclyAccessible": {
            "Fn::Equals": [
                {
                    "Ref": "CreateDemonstration"
                },
                "yes"
            ]
        },
        "CreateRedshift": {
            "Fn::Or": [
                {
                    "Condition": "CreateDemoResources"
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EnableRedshift"
                        },
                        "yes"
                    ]
                }
            ]
        },
        "CreateKinesisSampleStream": {
            "Fn::Equals": [
                {
                    "Ref": "CreateDemonstration"
                },
                "no"
            ]
        }
    },
    "Parameters": {
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved and 2 AZs MUST be used for this deployment",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "CreateDemonstration": {
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Default": "no",
            "Description": "Create EC2 instance with Datalake walk-through guide and load sample data into Redshift cluster and Kinesis streams",
            "Type": "String"
        },
        "DatasetS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Dataset bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "47lining-datalake-foundation-quick-start-data-us-west-2",
            "Description": "S3 Bucket where the Quick Start data are. Use this parameter to specify the S3 Bucket name you\u2019ve created for your copy of Quick Start data, if you decide to provide your own dataset. The Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen. Required only if Create Demonstration is set to \"yes\"",
            "Type": "String"
        },
        "DatasetS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Dataset key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "datalake-awsdata/v1",
            "Description": "S3 key prefix used to simulate a folder for your copy of Quick Start sample dataset, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes, but should not start with a forward slash (which is automatically added). Required only if Create Demonstration is set to \"yes\"",
            "Type": "String"
        },
        "ElasticsearchNodeCount": {
            "Default": "1",
            "Description": "The number of nodes in the Elasticsearch cluster.",
            "Type": "Number"
        },
        "ElasticsearchNodeType": {
            "AllowedValues": [
                "t2.small.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch"
            ],
            "ConstraintDescription": "must be a valid Elasticsearch node type.",
            "Default": "t2.small.elasticsearch",
            "Description": "The node type to be provisioned for the Elasticsearch cluster",
            "Type": "String"
        },
        "EnableRedshift": {
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Default": "yes",
            "Description": "Enable Redshift. If you run this Quick Start without Demonstration, you have an option to not provision Redshift. Redshift is provisioned if Create Demonstration is set to \"yes\".",
            "Type": "String"
        },
        "WizardInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "Web server EC2 instance type. Required only if Create Demonstration is set to \"yes\"",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "KinesisDataStreamName": {
            "Default": "MyKinesisDataStream",
            "Description": "Kinesis data stream name. Required only if Create Demonstration is set to \"no\"",
            "Type": "String"
        },
        "KinesisDataStreamS3Prefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "Default": "mydata",
            "Description": "Kinesis data stream S3 prefix for your streaming data stored in Datalake submissions bucket. Required only if Create Demonstration is set to \"no\"",
            "Type": "String"
        },
        "NAT1ElasticIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])",
            "Description": "IP of NAT 1, which will have allowed access to ElasticSearch",
            "Type": "String"
        },
        "NAT2ElasticIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])",
            "Description": "IP of NAT 2, which will have allowed access to ElasticSearch",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 Bucket where the Quick Start templates and scripts are installed. Use this parameter to specify the S3 Bucket name you\u2019ve created for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. The Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen.",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "datalake/47lining/latest/",
            "Description": "S3 key prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Type": "String"
        },
        "RedshiftDatabaseName": {
            "AllowedPattern": "([a-z]|[0-9])+",
            "ConstraintDescription": "must contain a-z or 0-9 only.",
            "Default": "quickstart",
            "Description": "The name of the first database to be created when Redshift cluster is created",
            "Type": "String"
        },
        "RedshiftDatabasePort": {
            "Default": "5439",
            "Description": "The port that Redshift will listen on and that will be allowed through the Security Group.",
            "Type": "String"
        },
        "RedshiftNodeType": {
            "AllowedValues": [
                "dw1.xlarge",
                "dw1.8xlarge",
                "dw2.large",
                "dw2.8xlarge",
                "dc1.large",
                "dc1.8xlarge",
                "ds1.xlarge",
                "ds1.8xlarge",
                "ds2.xlarge",
                "ds2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid Redshift node type.",
            "Default": "dc1.large",
            "Description": "The node type to be provisioned for Redshift cluster",
            "Type": "String"
        },
        "RedshiftNumberOfNodes": {
            "Default": "1",
            "Description": "The number of compute nodes in Redshift cluster.",
            "Type": "Number"
        },
        "RedshiftPassword": {
            "AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9!#$%&()*+,.:;<=>?\\[\\]^_`{|}~-]*$",
            "ConstraintDescription": "Password must contain 8 to 64 printable ASCII characters excluding: /, \", \\', \\ and @. It must contain 1 uppercase letter, 1 lowercase letter, and 1 number.",
            "Description": "The password that is associated with the master user account for Redshift cluster that is being created. Password must contain 8 to 64 printable ASCII characters excluding: /, \", \\', \\ and @. It must contain 1 uppercase letter, 1 lowercase letter, and 1 number.",
            "MaxLength": "64",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "RedshiftUsername": {
            "AllowedPattern": "^[a-z][a-z0-9_]*$",
            "ConstraintDescription": "User name parameter must be lowercase, begin with a letter, contain only alphanumeric characters or underscores, and be less than 128 characters.",
            "Default": "datalake",
            "Description": "The user name that is associated with the master user account for Redshift cluster that is being created. User name parameter must be lowercase, begin with a letter, contain only alphanumeric characters or underscores, and be less than 128 characters.",
            "MaxLength": "128",
            "MinLength": "1",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "CIDR block allowed to access Elasticsearch and SSH into bastion instance. You can use http://checkip.amazonaws.com/ to check your IP address. CIDR block parameter must be in the form x.x.x.x/x (e.g., 96.127.8.12/32, YOUR_IP/32)",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of the VPC (e.g., vpc-0343606e)",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WebApplicationPassword": {
            "AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[\\x00-\\x7F]*$",
            "ConstraintDescription": "Password must contain 8 to 64 ASCII characters. It must contain 1 uppercase letter, 1 lowercase letter, and 1 number.",
            "Description": "The password for web application. Password must contain 8 to 64 ASCII characters. It must contain 1 uppercase letter, 1 lowercase letter, and 1 number. Required only if Create Demonstration is set to \"yes\"",
            "MaxLength": "64",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "WebApplicationUsername": {
            "AllowedPattern": "^[\\x00-\\x7F]*$",
            "ConstraintDescription": "User name must contain 1 to 64 ASCII characters.",
            "Default": "DataLakeUser",
            "Description": "The user name for web application. User name must contain 1 to 64 ASCII characters. Required only if Create Demonstration is set to \"yes\"",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        }
    },
    "Resources": {
        "BucketsStack": {
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/buckets.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "CopyDataStack": {
            "Condition": "CreateDemoResources",
            "DependsOn": [
                "ElasticsearchStack"
            ],
            "Properties": {
                "Parameters": {
                    "CopyDataRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.CopyDataRoleARN"
                        ]
                    },
                    "DatasetS3BucketName": {
                        "Ref": "DatasetS3BucketName"
                    },
                    "DatasetS3KeyPrefix": {
                        "Ref": "DatasetS3KeyPrefix"
                    },
                    "SubmissionsBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy-data.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "ElasticsearchStack": {
            "DependsOn": [],
            "Properties": {
                "Parameters": {
                    "CopyLambdaDeploymentRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.CopyLambdaDeploymentRoleARN"
                        ]
                    },
                    "ElasticsearchAccessIP": {
                        "Ref": "RemoteAccessCIDR"
                    },
                    "LambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.LambdaRoleARN"
                        ]
                    },
                    "ManagedDatasetsARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedDatasetsARN"
                        ]
                    },
                    "ManagedTopicARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedTopicARN"
                        ]
                    },
                    "NAT1ElasticIP": {
                        "Ref": "NAT1ElasticIP"
                    },
                    "NAT2ElasticIP": {
                        "Ref": "NAT2ElasticIP"
                    },
                    "NodeCount": {
                        "Ref": "ElasticsearchNodeCount"
                    },
                    "NodeType": {
                        "Ref": "ElasticsearchNodeType"
                    },
                    "PublishedDataARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedDataARN"
                        ]
                    },
                    "PublishedTopicARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedTopicARN"
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    },
                    "SubmissionsBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketARN"
                        ]
                    },
                    "SubmissionsTopicARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsTopicARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/elasticsearch.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "EmptyBucketsStack": {
            "DependsOn": [],
            "Properties": {
                "Parameters": {
                    "CreateDemonstration": {
                        "Ref": "CreateDemonstration"
                    },
                    "EmptyBucketsRoleARN": {
                        "Fn::If": [
                            "CreateDemoResources",
                            {
                                "Fn::GetAtt": [
                                    "IAMRolesStack",
                                    "Outputs.EmptyBucketsRoleARN"
                                ]
                            },
                            ""
                        ]
                    },
                    "ManagedBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedBucketName"
                        ]
                    },
                    "PublishedBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedBucketName"
                        ]
                    },
                    "SubmissionsBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/empty-buckets.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "IAMRolesStack": {
            "Properties": {
                "Parameters": {
                    "AthenaQueryResultsBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.AthenaQueryResultsBucketARN"
                        ]
                    },
                    "CreateDemonstration": {
                        "Ref": "CreateDemonstration"
                    },
                    "DatasetS3BucketName": {
                        "Ref": "DatasetS3BucketName"
                    },
                    "EnableRedshift": {
                        "Ref": "EnableRedshift"
                    },
                    "ManagedDatasetsARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedDatasetsARN"
                        ]
                    },
                    "PublishedDataARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedDataARN"
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "RegionalLambdaBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketARN"
                        ]
                    },
                    "SnsLearnMoreTopicArn": {
                        "Fn::FindInMap": [
                            "ConstantsMap",
                            "Constants",
                            "SnsLearnMoreTopicArn"
                        ]
                    },
                    "SubmissionsBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/iam-roles.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "KinesisDemonstrationStack": {
            "Condition": "CreateDemoResources",
            "DependsOn": [
                "EmptyBucketsStack"
            ],
            "Properties": {
                "Parameters": {
                    "ElasticsearchAccessARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.ElasticsearchAccessARN"
                        ]
                    },
                    "ElasticsearchDomainARN": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.ElasticsearchDomainARN"
                        ]
                    },
                    "ManagedBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedDatasetsARN"
                        ]
                    },
                    "ManagedBucketAccessARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.ManagedBucketAccessARN"
                        ]
                    },
                    "RedshiftConnectionURL": {
                        "Fn::GetAtt": [
                            "RedshiftStack",
                            "Outputs.ConnectionURL"
                        ]
                    },
                    "RedshiftPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "RedshiftUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "SubmissionsBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketARN"
                        ]
                    },
                    "SubmissionsBucketAccessARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.SubmissionsBucketAccessARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/kinesis-demonstration.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "KinesisSampleStack": {
            "Condition": "CreateKinesisSampleStream",
            "Properties": {
                "Parameters": {
                    "KinesisStreamBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketName"
                        ]
                    },
                    "KinesisStreamBucketRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.KinesisStreamBucketRoleARN"
                        ]
                    },
                    "KinesisStreamKeyPrefix": {
                        "Ref": "KinesisDataStreamS3Prefix"
                    },
                    "KinesisStreamName": {
                        "Ref": "KinesisDataStreamName"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/kinesis.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "RedshiftStack": {
            "Condition": "CreateRedshift",
            "DependsOn": [],
            "Properties": {
                "Parameters": {
                    "DatabaseName": {
                        "Ref": "RedshiftDatabaseName"
                    },
                    "DatabasePort": {
                        "Ref": "RedshiftDatabasePort"
                    },
                    "NodeType": {
                        "Ref": "RedshiftNodeType"
                    },
                    "NumberOfNodes": {
                        "Ref": "RedshiftNumberOfNodes"
                    },
                    "PubliclyAccessible": {
                        "Fn::If": [
                            "RedshiftPubliclyAccessible",
                            "true",
                            "false"
                        ]
                    },
                    "QSRedshiftRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.QSRedshiftRoleARN"
                        ]
                    },
                    "RedshiftInboundCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "RedshiftPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "RedshiftUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "SubnetId1": {
                        "Fn::If": [
                            "RedshiftPubliclyAccessible",
                            {
                                "Ref": "PublicSubnet1ID"
                            },
                            {
                                "Ref": "PrivateSubnet1ID"
                            }
                        ]
                    },
                    "SubnetId2": {
                        "Fn::If": [
                            "RedshiftPubliclyAccessible",
                            {
                                "Ref": "PublicSubnet2ID"
                            },
                            {
                                "Ref": "PrivateSubnet2ID"
                            }
                        ]
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/redshift.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "RegisterKibanaMetadataDashboardLambda": {
            "DependsOn": [],
            "Properties": {
                "Parameters": {
                    "ElasticsearchEndpoint": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.ElasticsearchEndpoint"
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    },
                    "RegisterDashboardRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.RegisterKibanaDashboardRoleARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/register-dashboard.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "WebAppStack": {
            "Condition": "CreateDemoResources",
            "DependsOn": [
                "CopyDataStack"
            ],
            "Properties": {
                "Parameters": {
                    "ApplicationPassword": {
                        "Ref": "WebApplicationPassword"
                    },
                    "ApplicationUsername": {
                        "Ref": "WebApplicationUsername"
                    },
                    "AthenaQueryResultsBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.AthenaQueryResultsBucketName"
                        ]
                    },
                    "CleanOrdersStreamARN": {
                        "Fn::GetAtt": [
                            "KinesisDemonstrationStack",
                            "Outputs.CleanOrdersStreamARN"
                        ]
                    },
                    "CleanupResourcesRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.CleanupResourcesRoleARN"
                        ]
                    },
                    "DatasetS3BucketName": {
                        "Ref": "DatasetS3BucketName"
                    },
                    "DatasetS3KeyPrefix": {
                        "Ref": "DatasetS3KeyPrefix"
                    },
                    "ElasticsearchEndpoint": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.ElasticsearchEndpoint"
                        ]
                    },
                    "InstanceProfileName": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.InstanceProfileName"
                        ]
                    },
                    "WizardInstanceType": {
                        "Ref": "WizardInstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyPairName"
                    },
                    "KibanaURL": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.KibanaURL"
                        ]
                    },
                    "KinesisAnalyticsRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.AnalyticsAccessARN"
                        ]
                    },
                    "ManagedBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedDatasetsARN"
                        ]
                    },
                    "ManagedBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.ManagedBucketName"
                        ]
                    },
                    "NumWebServerInstances": 1,
                    "OrdersStreamARN": {
                        "Fn::GetAtt": [
                            "KinesisDemonstrationStack",
                            "Outputs.OrdersStreamARN"
                        ]
                    },
                    "OrdersStreamName": {
                        "Fn::GetAtt": [
                            "KinesisDemonstrationStack",
                            "Outputs.OrdersStreamName"
                        ]
                    },
                    "PrivateSubnet1ID": {
                        "Ref": "PrivateSubnet1ID"
                    },
                    "PrivateSubnet2ID": {
                        "Ref": "PrivateSubnet2ID"
                    },
                    "PublicSubnet1ID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "PublicSubnet2ID": {
                        "Ref": "PublicSubnet2ID"
                    },
                    "PublishedBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedBucketName"
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "RedshiftConnectionURL": {
                        "Fn::GetAtt": [
                            "RedshiftStack",
                            "Outputs.ConnectionURL"
                        ]
                    },
                    "RedshiftPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "RedshiftRoleARN": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.QSRedshiftRoleARN"
                        ]
                    },
                    "RedshiftUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "RevenueByStateStreamARN": {
                        "Fn::GetAtt": [
                            "KinesisDemonstrationStack",
                            "Outputs.RevenueByStateStreamARN"
                        ]
                    },
                    "SnsLearnMoreTopicArn": {
                        "Fn::FindInMap": [
                            "ConstantsMap",
                            "Constants",
                            "SnsLearnMoreTopicArn"
                        ]
                    },
                    "SubmissionsBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketARN"
                        ]
                    },
                    "SubmissionsBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.SubmissionsBucketName"
                        ]
                    },
                    "TopSKUStreamARN": {
                        "Fn::GetAtt": [
                            "KinesisDemonstrationStack",
                            "Outputs.TopSKUStreamARN"
                        ]
                    },
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/web-app.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        }
    },
    "Outputs": {
        "DataLakeWizardWebAppURL": {
            "Description": "Web App URL",
            "Condition": "CreateDemoResources",
            "Value": {
                "Fn::GetAtt": [
                    "WebAppStack",
                    "Outputs.URL"
                ]
            }
        },
        "SubmissionsBucketName": {
            "Description": "Submissions bucket name",
            "Value": {
                "Fn::GetAtt": [
                    "BucketsStack",
                    "Outputs.SubmissionsBucketName"
                ]
            }
        },
        "ManagedBucketName": {
            "Description": "Managed bucket name",
            "Value": {
                "Fn::GetAtt": [
                    "BucketsStack",
                    "Outputs.ManagedBucketName"
                ]
            }
        },
        "PublishedBucketName": {
            "Description": "Published bucket name",
            "Value": {
                "Fn::GetAtt": [
                    "BucketsStack",
                    "Outputs.PublishedBucketName"
                ]
            }
        },
        "RedshiftJdbcUrl": {
            "Description": "Redshift JDBC url",
            "Condition": "CreateRedshift",
            "Value": {
                "Fn::GetAtt": [
                    "RedshiftStack",
                    "Outputs.ConnectionURL"
                ]
            }
        },
        "ElasticsearchEndpoint": {
            "Description": "Elasticsearch endpoint",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticsearchStack",
                    "Outputs.ElasticsearchEndpoint"
                ]
            }
        },
        "KinesisDataStreamName": {
            "Description": "KinesisDataStreamName",
            "Condition": "CreateKinesisSampleStream",
            "Value": {
                "Fn::GetAtt": [
                    "KinesisSampleStack",
                    "Outputs.KinesisDataStreamName"
                ]
            }
        }
    }
}