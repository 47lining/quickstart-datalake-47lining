{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to delete all data from Datalake buckets",
    "Resources": {
        "EmptyBuckets": {
            "Condition": "CreateDemoResources",
            "Properties": {
                "ManagedDatasets": {
                    "Ref": "ManagedBucketName"
                },
                "PublishedData": {
                    "Ref": "PublishedBucketName"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EmptyBucketsFunction",
                        "Arn"
                    ]
                },
                "SubmissionsBucket": {
                    "Ref": "SubmissionsBucketName"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "EmptyBucketsFunction": {
            "Condition": "CreateDemoResources",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import cfnresponse",
                                "import boto3",
                                "from botocore.exceptions import ClientError",
                                "",
                                "s3 = boto3.resource('s3')",
                                "",
                                "def handler(event, context):",
                                "    submissions_bucket = s3.Bucket(event['ResourceProperties']['SubmissionsBucket'])",
                                "    managed_datasets = s3.Bucket(event['ResourceProperties']['ManagedDatasets'])",
                                "    published_data = s3.Bucket(event['ResourceProperties']['PublishedData'])",
                                "    if event['RequestType'] == 'Delete':",
                                "        try:",
                                "            submissions_bucket.objects.all().delete()",
                                "            managed_datasets.objects.all().delete()",
                                "            published_data.objects.all().delete()",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except ClientError as e:",
                                "            print(e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Ref": "EmptyBucketsRoleARN"
                },
                "Runtime": "python3.6",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        }
    },
    "Conditions": {
        "CreateDemoResources": {
            "Fn::Equals": [
                {
                    "Ref": "CreateDemonstration"
                },
                "yes"
            ]
        }
    },
    "Parameters": {
        "CreateDemonstration": {
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Default": "no",
            "Description": "Create EC2 instance with Datalake walk-through guide and load sample data into Redshift cluster and Kinesis streams",
            "Type": "String"
        },
        "EmptyBucketsRoleARN": {
            "Description": "EmptyBucketsRole ARN",
            "Type": "String"
        },
        "ManagedBucketName": {
            "Description": "ManagedDatasets bucket name",
            "Type": "String"
        },
        "PublishedBucketName": {
            "Description": "PublishedData bucket name",
            "Type": "String"
        },
        "SubmissionsBucketName": {
            "Description": "SubmissionsBucket bucket name",
            "Type": "String"
        }
    }
}