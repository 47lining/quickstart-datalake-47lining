{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS Cloudformation template to create an EC2 instance, installs Data Lake walk-through webapp and creates ELB. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "InstanceType": {
            "Description": "Web server EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VpcId": {
            "Description": "Web server VPC",
            "Type": "AWS::EC2::VPC::Id"
        },
        "VPCCIDR": {
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "Web server subnet 1",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "Web server subnet 2",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "Elastic load balancer subnet 1",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "Elastic load balancer subnet 2",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "ApplicationUsername": {
            "Description": "Web server username",
            "Type": "String"
        },
        "ApplicationPassword": {
            "Description": "Web server password",
            "NoEcho": "true",
            "Type": "String"
        },
        "RedshiftConnectionURL": {
            "Description": "JDBC redshift connection URL",
            "Type": "String"
        },
        "RedshiftUsername": {
            "Description": "Redshift username",
            "Type": "String"
        },
        "RedshiftPassword": {
            "Description": "Redshift password",
            "Type": "String",
            "NoEcho": "true"
        },
        "RedshiftRoleARN": {
            "Description": "Redshift role ARN",
            "Type": "String"
        },
        "SubmissionsBucketName": {
            "Description": "Submissions bucket name",
            "Type": "String"
        },
        "SubmissionsBucketARN": {
            "Description": "Submissions bucket ARN",
            "Type": "String"
        },
        "ManagedBucketName": {
            "Description": "Manged bucket name",
            "Type": "String"
        },
        "ManagedBucketARN": {
            "Description": "Managed bucket ARN",
            "Type": "String"
        },
        "PublishedBucketName": {
            "Description": "Published bucket name",
            "Type": "String"
        },
        "OrdersStreamName": {
            "Description": "Orders stream name",
            "Type": "String"
        },
        "OrdersStreamARN": {
            "Description": "Orders stream ARN",
            "Type": "String"
        },
        "CleanOrdersStreamARN": {
            "Description": "Clean orders stream ARN",
            "Type": "String"
        },
        "RevenueByStateStreamARN": {
            "Description": "Revenue by state stream ARN",
            "Type": "String"
        },
        "TopSKUStreamARN": {
            "Description": "Top SKU stream ARN",
            "Type": "String"
        },
        "KinesisAnalyticsRoleARN": {
            "Description": "Kinesis analytics role ARN",
            "Type": "String"
        },
        "ElasticsearchEndpoint": {
            "Description": "Elasticsearch endpoint",
            "Type": "String"
        },
        "KibanaURL": {
            "Description": "Kibana URL",
            "Type": "String"
        },
        "QSS3BucketName": {
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "DatasetS3BucketName": {
            "Description": "Dataset bucket name for the Quick Start dataset. Dataset bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "DatasetS3KeyPrefix": {
            "Description": "S3 key prefix for the Quick Start dataset. Dataset key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "AthenaQueryResultsBucketName": {
            "Description": "Athena query results bucket name for the Quick Start Athena query results. Athena query results bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "CleanupResourcesRoleARN": {
            "Description": "CleanupResourcesRole ARN",
            "Type": "String"
        },
        "InstanceProfileName": {
            "Description": "InstanceProfile Name",
            "Type": "String"
        },
        "NumWebServerInstances": {
            "Description": "Number or web server instances in Auto scaling group",
            "Type": "Number"
        },
        "SnsLearnMoreTopicArn": {
            "Description": "SNS Topic ARN for Learn More topic",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2"
            },
            "us-east-1": {
                "AMI": "ami-c58c1dd3"
            },
            "us-west-2": {
                "AMI": "ami-4836a428"
            }
        }
    },
    "Resources": {
        "WebServerAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "WebServerLaunchConfiguration"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ],
                "MinSize": {
                    "Ref": "NumWebServerInstances"
                },
                "MaxSize": {
                    "Ref": "NumWebServerInstances"
                },
                "Cooldown": "300",
                "DesiredCapacity": {
                    "Ref": "NumWebServerInstances"
                },
                "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}],
                "Tags": [{
                     "Key": "Name",
                     "Value": "DataLakeWalkthroughWebapp",
                     "PropagateAtLaunch": "true"
                }]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "NumWebServerInstances"
                    },
                    "Timeout": "PT15M"
                }
            }
        },
        "WebServerLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Install Flask application",
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "python34": [],
                                "python34-pip": [],
                                "python34-devel": [],
                                "postgresql93-devel": [],
                                "gcc": []
                            }
                        },
                        "files": {
                            "/etc/production.ini": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "[webapp]",
                                            "port=2000",
                                            {
                                                "Fn::Sub": "webapp_username=${ApplicationUsername}"
                                            },
                                            {
                                                "Fn::Sub": "webapp_password=${ApplicationPassword}"
                                            },
                                            "[aws]",
                                            {
                                                "Fn::Sub": "region_name=${AWS::Region}"
                                            },
                                            {
                                                "Fn::Sub": "account_number=${AWS::AccountId}"
                                            },
                                            "[redshift]",
                                            {
                                                "Fn::Sub": "redshift_username=${RedshiftUsername}"
                                            },
                                            {
                                                "Fn::Sub": "redshift_password=${RedshiftPassword}"
                                            },
                                            {
                                                "Fn::Sub": "redshift_jdbc_url=${RedshiftConnectionURL}"
                                            },
                                            {
                                                "Fn::Sub": "redshift_role_arn=${RedshiftRoleARN}"
                                            },
                                            "redshift_external_schema_name=data_lake",
                                            "redshift_external_database_name=data_lake_db",
                                            "[buckets]",
                                            {
                                                "Fn::Sub": "submissions_bucket_name=${SubmissionsBucketName}"
                                            },
                                            {
                                                "Fn::Sub": "submissions_bucket_arn=${SubmissionsBucketARN}"
                                            },
                                            {
                                                "Fn::Sub": "managed_bucket_name=${ManagedBucketName}"
                                            },
                                            {
                                                "Fn::Sub": "managed_bucket_arn=${ManagedBucketARN}"
                                            },
                                            {
                                                "Fn::Sub": "published_bucket_name=${PublishedBucketName}"
                                            },
                                            "demographics_submission_path=demographics/2017/06/02/demographics20170520.zip",
                                            "demographics_managed_path=demographics/v=20170520/p=csv/dt=2017-06-01/demographics_data.csv",
                                            "demographics_managed_dir=demographics/v=20170520/p=csv/",
                                            "demographics_partition=2017-06-01",
                                            "customers_submission_path=customers/2017/06/01/customers.csv",
                                            "customers_managed_path=customers/v=20170601/p=csv/dt=2017-06-01/customers.csv",
                                            "customers_managed_dir=customers/v=20170601/p=csv/",
                                            "orders_submission_path=orders/2017/06/01/orders.csv",
                                            "orders_managed_path=orders/v=20170601/p=csv/dt=2017-06-01/orders.csv",
                                            "orders_managed_dir=orders/v=20170601/p=csv/",
                                            "products_submission_path=products/2017/06/01/products.csv",
                                            "products_managed_dir=products/v=20170601/p=csv/",
                                            "[streams]",
                                            {
                                                "Fn::Sub": "orders_stream_name=${OrdersStreamName}"
                                            },
                                            {
                                                "Fn::Sub": "orders_stream_arn=${OrdersStreamARN}"
                                            },
                                            {
                                                "Fn::Sub": "clean_orders_stream_arn=${CleanOrdersStreamARN}"
                                            },
                                            {
                                                "Fn::Sub": "revenue_by_state_stream_arn=${RevenueByStateStreamARN}"
                                            },
                                            {
                                                "Fn::Sub": "top_sku_stream_arn=${TopSKUStreamARN}"
                                            },
                                            {
                                                "Fn::Sub": "kinesis_analytics_role_arn=${KinesisAnalyticsRoleARN}"
                                            },
                                            "generator_sleep_interval=0.5",
                                            "generator_chunk_size=5",
                                            "generator_events_count=30000",
                                            "generator_customers_path=/home/ec2-user/customers_metadata.json",
                                            "[kibana]",
                                            {
                                                "Fn::Sub": "kibana_url=${KibanaURL}"
                                            },
                                            "[athena]",
                                            "athena_database_name=athena_db",
                                            {
                                                "Fn::Sub": "athena_query_results_bucket_name=${AthenaQueryResultsBucketName}"
                                            },
                                            "[sns]",
                                            {
                                                "Fn::Sub": "sns_learn_more_topic_arn=${SnsLearnMoreTopicArn}"
                                            }
                                        ]
                                    ]
                                },
                                "mode": "000444",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/etc/bootstrap.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "# Install python requirements",
                                            "pip-3.4 install flask==0.12.1",
                                            "pip-3.4 install awscli==1.11.84",
                                            "pip-3.4 install psycopg2==2.7.1",
                                            "pip-3.4 install jinja2==2.9.6",
                                            "pip-3.4 install boto3==1.4.4",
                                            "pip-3.4 install botocore==1.5.52",
                                            "alias aws=/usr/local/bin/aws",
                                            {
                                                "Fn::Sub": "aws s3 cp s3://${SubmissionsBucketName}/metadata/customers_metadata.json /home/ec2-user/"
                                            },
                                            "cd /home/ec2-user",
                                            {
                                                "Fn::Sub": "aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix} ."
                                            },
                                            "cd /home/ec2-user/assets",
                                            "python3.4 setup.py develop",
                                            "chown -R ec2-user:ec2-user /home/ec2-user",
                                            {
                                                "Fn::Sub": "python3.4 kibana/import_analysis_dashboard.py --elasticsearch-endpoint ${ElasticsearchEndpoint}"
                                            }
                                        ]
                                    ]
                                },
                                "mode": "000770",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "1_run_bootstrap": {
                                "command": "sh -e /etc/bootstrap.sh"
                            },
                            "9_run_webserver": {
                                "command": "runuser -l ec2-user -c \"python3.4 /home/ec2-user/assets/web/app.py --config /etc/production.ini > server.log 2>&1 &\""
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                "yum update -y",
                                "yum install -y aws-cfn-bootstrap",
                                "# Install the files and packages from the metadata",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerLaunchConfiguration --region ${AWS::Region}"
                                },
                                "# Signal the status from cfn-init",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerAutoScalingGroup --region ${AWS::Region}"
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": "Enable SSH access from Bastion via port 22, and from ELB via port range 1024-65535",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1024",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "2000",
                        "Protocol": "HTTP"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "ConnectionSettings": {
                    "IdleTimeout": "180"
                }
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": "Enable Elastic Load Balancer access via port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "CleanupResources": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CleanupResourcesFunction",
                        "Arn"
                    ]
                },
                "AthenaQueryResultsBucket": {
                    "Ref": "AthenaQueryResultsBucketName"
                },
                "SubmissionsBucket": {
                    "Ref": "SubmissionsBucketName"
                },
                "ManagedDatasets": {
                    "Ref": "ManagedBucketName"
                },
                "PublishedData": {
                    "Ref": "PublishedBucketName"
                }
            }
        },
        "CleanupResourcesFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import cfnresponse",
                                "import boto3",
                                "from time import sleep",
                                "from botocore.exceptions import ClientError",
                                "",
                                "s3 = boto3.resource('s3')",
                                "ka_client = boto3.client('kinesisanalytics')",
                                "",
                                "def handler(event, context):",
                                "    submissions_bucket = s3.Bucket(event['ResourceProperties']['SubmissionsBucket'])",
                                "    managed_datasets = s3.Bucket(event['ResourceProperties']['ManagedDatasets'])",
                                "    published_data = s3.Bucket(event['ResourceProperties']['PublishedData'])",
                                "    athena_query_results_bucket = s3.Bucket(event['ResourceProperties']['AthenaQueryResultsBucket'])",
                                "    if event['RequestType'] == 'Delete':",
                                "        try:",
                                "           submissions_bucket.objects.all().delete()",
                                "           managed_datasets.objects.all().delete()",
                                "           published_data.objects.all().delete()",
                                "           athena_query_results_bucket.objects.all().delete()",
                                "           response = ka_client.list_applications()",
                                "           for app in filter(lambda ap: ap['ApplicationName'] in {'clean-orders-app', 'aggregate-orders-app'}, response['ApplicationSummaries']):",
                                "              described_app = ka_client.describe_application(ApplicationName=app['ApplicationName'])",
                                "              delete_response = ka_client.delete_application(ApplicationName=app['ApplicationName'],",
                                "                  CreateTimestamp=described_app['ApplicationDetail']['CreateTimestamp'])",
                                "           return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except ClientError as e:",
                                "            print(e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Ref": "CleanupResourcesRoleARN"
                },
                "Runtime": "python3.6",
                "Timeout": 30
            }
        }
    },
    "Outputs": {
        "URL": {
            "Value": {
                "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "CanonicalHostedZoneName"
                ]
            },
            "Description": "ELB URL"
        }
    }
}